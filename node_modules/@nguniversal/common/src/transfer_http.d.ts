/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';
import { ApplicationRef } from '@angular/core';
import { TransferState } from '@angular/platform-browser';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
export interface TransferHttpResponse {
    body?: any | null;
    headers?: {
        [k: string]: string[];
    };
    status?: number;
    statusText?: string;
    url?: string;
}
export declare class TransferHttpCacheInterceptor implements HttpInterceptor {
    private transferState;
    private isCacheActive;
    private invalidateCacheEntry(url);
    private makeCacheKey(method, url, params);
    constructor(appRef: ApplicationRef, transferState: TransferState);
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TransferHttpCacheInterceptor>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<TransferHttpCacheInterceptor>;
}
/**
 * An NgModule used in conjunction with `ServerTransferHttpCacheModule` to transfer cached HTTP
 * calls from the server to the client application.
 */
export declare class TransferHttpCacheModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<TransferHttpCacheModule, never, [typeof ɵngcc1.BrowserTransferStateModule], never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<TransferHttpCacheModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmZXJfaHR0cC5kLnRzIiwic291cmNlcyI6WyJ0cmFuc2Zlcl9odHRwLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvblJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJhbnNmZXJTdGF0ZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuZXhwb3J0IGludGVyZmFjZSBUcmFuc2Zlckh0dHBSZXNwb25zZSB7XG4gICAgYm9keT86IGFueSB8IG51bGw7XG4gICAgaGVhZGVycz86IHtcbiAgICAgICAgW2s6IHN0cmluZ106IHN0cmluZ1tdO1xuICAgIH07XG4gICAgc3RhdHVzPzogbnVtYmVyO1xuICAgIHN0YXR1c1RleHQ/OiBzdHJpbmc7XG4gICAgdXJsPzogc3RyaW5nO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVHJhbnNmZXJIdHRwQ2FjaGVJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gICAgcHJpdmF0ZSB0cmFuc2ZlclN0YXRlO1xuICAgIHByaXZhdGUgaXNDYWNoZUFjdGl2ZTtcbiAgICBwcml2YXRlIGludmFsaWRhdGVDYWNoZUVudHJ5KHVybCk7XG4gICAgcHJpdmF0ZSBtYWtlQ2FjaGVLZXkobWV0aG9kLCB1cmwsIHBhcmFtcyk7XG4gICAgY29uc3RydWN0b3IoYXBwUmVmOiBBcHBsaWNhdGlvblJlZiwgdHJhbnNmZXJTdGF0ZTogVHJhbnNmZXJTdGF0ZSk7XG4gICAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+Pjtcbn1cbi8qKlxuICogQW4gTmdNb2R1bGUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGBTZXJ2ZXJUcmFuc2Zlckh0dHBDYWNoZU1vZHVsZWAgdG8gdHJhbnNmZXIgY2FjaGVkIEhUVFBcbiAqIGNhbGxzIGZyb20gdGhlIHNlcnZlciB0byB0aGUgY2xpZW50IGFwcGxpY2F0aW9uLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUcmFuc2Zlckh0dHBDYWNoZU1vZHVsZSB7XG59XG4iXX0=