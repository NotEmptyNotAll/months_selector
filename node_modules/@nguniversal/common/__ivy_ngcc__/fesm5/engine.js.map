{"version":3,"file":"engine.js","sources":["npm_package.esm5/modules/modules/common/engine/src/file-loader.ts","npm_package.esm5/modules/modules/common/engine/src/engine.ts","npm_package.esm5/modules/common/engine/private_api.ts","npm_package.esm5/modules/common/engine/public_api.ts","npm_package.esm5/modules/common/engine/index.ts","npm_package.esm5/modules/common/engine/engine_public_index.ts"],"names":["fs.readFile","fs.readFileSync"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as fs from 'fs';\nimport { ResourceLoader } from '@angular/compiler';\n\n/** ResourceLoader implementation for loading files */\nexport class FileLoader implements ResourceLoader {\n  get(url: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(url, (err: NodeJS.ErrnoException, buffer: Buffer) => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(buffer.toString());\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ResourceLoader} from '@angular/compiler';\nimport {Compiler, Type, NgModuleFactory, CompilerFactory, StaticProvider} from '@angular/core';\nimport {INITIAL_CONFIG, renderModuleFactory, platformDynamicServer} from '@angular/platform-server';\nimport * as fs from 'fs';\n\nimport {FileLoader} from './file-loader';\nimport {RenderOptions} from './interfaces';\n\n/**\n * A common rendering engine utility. This abstracts the logic\n * for handling the platformServer compiler, the module cache, and\n * the document loader\n */\nexport class CommonEngine {\n\n  /** Return an instance of the platformServer compiler */\n  getCompiler(): Compiler {\n    const compilerFactory: CompilerFactory = platformDynamicServer().injector.get(CompilerFactory);\n    return compilerFactory.createCompiler([\n      {providers: [{provide: ResourceLoader, useClass: FileLoader, deps: []}]}\n    ]);\n  }\n\n  private factoryCacheMap = new Map<Type<{}>, NgModuleFactory<{}>>();\n  private templateCache: {[key: string]: string} = {};\n\n  constructor(private moduleOrFactory: Type<{}> | NgModuleFactory<{}>,\n              private providers: StaticProvider[] = []) {}\n\n  /**\n   * Render an HTML document for a specific URL with specified\n   * render options\n   */\n  async render(opts: RenderOptions): Promise<string> {\n    // if opts.document dosen't exist then opts.documentFilePath must\n    const doc = opts.document || await this.getDocument(opts!.documentFilePath as string);\n    const extraProviders = [\n      ...(opts.providers || []),\n      ...(this.providers || []),\n      {\n        provide: INITIAL_CONFIG,\n        useValue: {\n          document: doc,\n          url: opts.url\n        }\n      }\n    ];\n\n    const factory = await this.getFactory();\n    return renderModuleFactory(factory, {extraProviders});\n  }\n\n  /** Return the factory for a given engine instance */\n  getFactory(): Promise<NgModuleFactory<{}>> {\n    // If module has been compiled AoT\n    const moduleOrFactory = this.moduleOrFactory;\n    if (moduleOrFactory instanceof NgModuleFactory) {\n      return Promise.resolve(moduleOrFactory);\n    } else {\n      // we're in JIT mode\n      let moduleFactory = this.factoryCacheMap.get(moduleOrFactory);\n\n      // If module factory is cached\n      if (moduleFactory) {\n        return Promise.resolve(moduleFactory);\n      }\n\n      // Compile the module and cache it\n      return this.getCompiler().compileModuleAsync(moduleOrFactory)\n        .then((factory) => {\n          this.factoryCacheMap.set(moduleOrFactory, factory);\n          return factory;\n        });\n    }\n  }\n\n  /** Retrieve the document from the cache or the filesystem */\n  private getDocument(filePath: string): Promise<string> {\n    const doc = this.templateCache[filePath] = this.templateCache[filePath] ||\n    fs.readFileSync(filePath).toString();\n\n    // As  promise so we can change the API later without breaking\n    return Promise.resolve(doc);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport { FileLoader as ÉµFileLoader, CommonEngine as ÉµCommonEngine,\n  RenderOptions as ÉµRenderOptions } from './src/index';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './private_api';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}