import { Injectable, Inject, PLATFORM_ID, NgModule, InjectionToken } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
var WindowService = /** @class */ (function () {
    function WindowService(platformId) {
        if (!isPlatformBrowser(platformId)) {
            // const req: any = this.injector.get(this.injector.get(USERAGENTTOKEN));
            // this._window = {navigator: {userAgent: req.get('User-Agent')}};
            this._window = (/** @type {?} */ ({ navigator: { userAgent: 'fakeAgent' } }));
        }
        else {
            this._window = window;
        }
    }
    Object.defineProperty(WindowService.prototype, "nativeWindow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._window;
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    WindowService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
WindowService.ɵfac = function WindowService_Factory(t) { return new (t || WindowService)(ɵngcc0.ɵɵinject(PLATFORM_ID)); };
WindowService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: WindowService, factory: function (t) { return WindowService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WindowService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
    return WindowService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var LocalStorageWrapper = /** @class */ (function () {
    function LocalStorageWrapper(platformId) {
        if (isPlatformBrowser(platformId)) {
            this.localStorageRef = localStorage;
        }
        else {
            this.localStorageRef = {
                clear: function () { },
                getItem: function (key) { return (/** @type {?} */ (undefined)); },
                key: function (index) { return (/** @type {?} */ (undefined)); },
                removeItem: function (key) { },
                setItem: function (key, value) { },
                length: 0
            };
        }
    }
    Object.defineProperty(LocalStorageWrapper.prototype, "localStorage", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localStorageRef;
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    LocalStorageWrapper.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
LocalStorageWrapper.ɵfac = function LocalStorageWrapper_Factory(t) { return new (t || LocalStorageWrapper)(ɵngcc0.ɵɵinject(PLATFORM_ID)); };
LocalStorageWrapper.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LocalStorageWrapper, factory: function (t) { return LocalStorageWrapper.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LocalStorageWrapper, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
    return LocalStorageWrapper;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var DocumentService = /** @class */ (function () {
    function DocumentService(platformId) {
        if (!isPlatformBrowser(platformId)) {
            this._document = (/** @type {?} */ ((/** @type {?} */ ({
                getElementById: function (id) { return new HTMLElement(); },
                getElementsByClassName: function (className) { return new HTMLCollection(); },
                getElementsByName: function (name) { return new NodeList(); },
                getElementsByTagName: function (name) { return new NodeList(); }
            }))));
        }
        else {
            console.log('in browser, assigning document');
            // this._document = document;
            this._document = (/** @type {?} */ ({}));
        }
    }
    Object.defineProperty(DocumentService.prototype, "nativeDocument", {
        get: /**
         * @return {?}
         */
        function () {
            console.log('get native document');
            console.log(this._document);
            return this._document;
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    DocumentService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
DocumentService.ɵfac = function DocumentService_Factory(t) { return new (t || DocumentService)(ɵngcc0.ɵɵinject(PLATFORM_ID)); };
DocumentService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DocumentService, factory: function (t) { return DocumentService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DocumentService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
    return DocumentService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var WINDOW = new InjectionToken('ng-toolkit-window');
/**
 * @param {?} windowService
 * @return {?}
 */
function windowFactory(windowService) {
    return windowService.nativeWindow;
}
/** @type {?} */
var LOCAL_STORAGE = new InjectionToken('ng-toolkit-local-storage');
/**
 * @param {?} localStorageWrapper
 * @return {?}
 */
function localStorageFactory(localStorageWrapper) {
    return localStorageWrapper.localStorage;
}
/** @type {?} */
var NGT_DOCUMENT = new InjectionToken('ng-toolkit-document');
/**
 * @param {?} documentService
 * @return {?}
 */
function documentFactory(documentService) {
    console.log('document factory');
    return documentService.nativeDocument;
}
var NgtUniversalModule = /** @class */ (function () {
    function NgtUniversalModule() {
    }
NgtUniversalModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgtUniversalModule });
NgtUniversalModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgtUniversalModule_Factory(t) { return new (t || NgtUniversalModule)(); }, providers: [
        WindowService,
        { provide: WINDOW, useFactory: windowFactory, deps: [WindowService] },
        DocumentService,
        { provide: NGT_DOCUMENT, useFactory: documentFactory, deps: [DocumentService] },
        LocalStorageWrapper,
        { provide: LOCAL_STORAGE, useFactory: localStorageFactory, deps: [LocalStorageWrapper] }
    ] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgtUniversalModule, [{
        type: NgModule,
        args: [{
                providers: [
                    WindowService,
                    { provide: WINDOW, useFactory: windowFactory, deps: [WindowService] },
                    DocumentService,
                    { provide: NGT_DOCUMENT, useFactory: documentFactory, deps: [DocumentService] },
                    LocalStorageWrapper,
                    { provide: LOCAL_STORAGE, useFactory: localStorageFactory, deps: [LocalStorageWrapper] }
                ]
            }]
    }], function () { return []; }, null); })();
    return NgtUniversalModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { windowFactory, localStorageFactory, documentFactory, WINDOW, LOCAL_STORAGE, NGT_DOCUMENT, NgtUniversalModule, DocumentService, LocalStorageWrapper as ɵb, WindowService as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,