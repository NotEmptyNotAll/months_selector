import { Injectable, Inject, PLATFORM_ID, NgModule, InjectionToken } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
class WindowService {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        if (!isPlatformBrowser(platformId)) {
            // const req: any = this.injector.get(this.injector.get(USERAGENTTOKEN));
            // this._window = {navigator: {userAgent: req.get('User-Agent')}};
            this._window = (/** @type {?} */ ({ navigator: { userAgent: 'fakeAgent' } }));
        }
        else {
            this._window = window;
        }
    }
    /**
     * @return {?}
     */
    get nativeWindow() {
        return this._window;
    }
}
WindowService.ɵfac = function WindowService_Factory(t) { return new (t || WindowService)(ɵngcc0.ɵɵinject(PLATFORM_ID)); };
WindowService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: WindowService, factory: WindowService.ɵfac });
/** @nocollapse */
WindowService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WindowService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class LocalStorageWrapper {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        if (isPlatformBrowser(platformId)) {
            this.localStorageRef = localStorage;
        }
        else {
            this.localStorageRef = {
                clear: () => { },
                getItem: (key) => (/** @type {?} */ (undefined)),
                key: (index) => (/** @type {?} */ (undefined)),
                removeItem: (key) => { },
                setItem: (key, value) => { },
                length: 0
            };
        }
    }
    /**
     * @return {?}
     */
    get localStorage() {
        return this.localStorageRef;
    }
}
LocalStorageWrapper.ɵfac = function LocalStorageWrapper_Factory(t) { return new (t || LocalStorageWrapper)(ɵngcc0.ɵɵinject(PLATFORM_ID)); };
LocalStorageWrapper.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LocalStorageWrapper, factory: LocalStorageWrapper.ɵfac });
/** @nocollapse */
LocalStorageWrapper.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LocalStorageWrapper, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class DocumentService {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        if (!isPlatformBrowser(platformId)) {
            this._document = (/** @type {?} */ ((/** @type {?} */ ({
                getElementById: (id) => new HTMLElement(),
                getElementsByClassName: (className) => new HTMLCollection(),
                getElementsByName: (name) => new NodeList(),
                getElementsByTagName: (name) => new NodeList()
            }))));
        }
        else {
            console.log('in browser, assigning document');
            // this._document = document;
            this._document = (/** @type {?} */ ({}));
        }
    }
    /**
     * @return {?}
     */
    get nativeDocument() {
        console.log('get native document');
        console.log(this._document);
        return this._document;
    }
}
DocumentService.ɵfac = function DocumentService_Factory(t) { return new (t || DocumentService)(ɵngcc0.ɵɵinject(PLATFORM_ID)); };
DocumentService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DocumentService, factory: DocumentService.ɵfac });
/** @nocollapse */
DocumentService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DocumentService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
const WINDOW = new InjectionToken('ng-toolkit-window');
/**
 * @param {?} windowService
 * @return {?}
 */
function windowFactory(windowService) {
    return windowService.nativeWindow;
}
/** @type {?} */
const LOCAL_STORAGE = new InjectionToken('ng-toolkit-local-storage');
/**
 * @param {?} localStorageWrapper
 * @return {?}
 */
function localStorageFactory(localStorageWrapper) {
    return localStorageWrapper.localStorage;
}
/** @type {?} */
const NGT_DOCUMENT = new InjectionToken('ng-toolkit-document');
/**
 * @param {?} documentService
 * @return {?}
 */
function documentFactory(documentService) {
    console.log('document factory');
    return documentService.nativeDocument;
}
class NgtUniversalModule {
}
NgtUniversalModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgtUniversalModule });
NgtUniversalModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgtUniversalModule_Factory(t) { return new (t || NgtUniversalModule)(); }, providers: [
        WindowService,
        { provide: WINDOW, useFactory: windowFactory, deps: [WindowService] },
        DocumentService,
        { provide: NGT_DOCUMENT, useFactory: documentFactory, deps: [DocumentService] },
        LocalStorageWrapper,
        { provide: LOCAL_STORAGE, useFactory: localStorageFactory, deps: [LocalStorageWrapper] }
    ] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgtUniversalModule, [{
        type: NgModule,
        args: [{
                providers: [
                    WindowService,
                    { provide: WINDOW, useFactory: windowFactory, deps: [WindowService] },
                    DocumentService,
                    { provide: NGT_DOCUMENT, useFactory: documentFactory, deps: [DocumentService] },
                    LocalStorageWrapper,
                    { provide: LOCAL_STORAGE, useFactory: localStorageFactory, deps: [LocalStorageWrapper] }
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { windowFactory, localStorageFactory, documentFactory, WINDOW, LOCAL_STORAGE, NGT_DOCUMENT, NgtUniversalModule, DocumentService, LocalStorageWrapper as ɵb, WindowService as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,